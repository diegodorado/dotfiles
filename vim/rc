" Mostly stolen from Yan Pritzer's most excellent Yadr (github.com/skwp/dotfiles)
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" ================ General Config ====================
set number                      "Line numbers are good
set rnu
set backspace=indent,eol,start  "Allow backspace in insert mode
set history=1000                "Store lots of :cmdline history
set showcmd                     "Show incomplete cmds down the bottom
set showmode                    "Show current mode down the bottom
set gcr=a:blinkon0              "Disable cursor blink
set visualbell                  "No sounds
set t_vb=                       "turn off flashing
set autoread                    "Reload files changed outside vim

" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

"turn on syntax highlighting
syntax on

" The mapleader has to be set before vundle starts loading all
" the plugins.
let mapleader = "\<Space>"

" ================ Turn Off Swap Files ==============
set noswapfile
set nobackup
set nowb

" ================ Indentation ======================
set autoindent
set nosmartindent " gives me troubles with tidal files
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

" Auto indent pasted text
"nnoremap p p=`]<C-o>
"nnoremap P P=`]<C-o>


call plug#begin('~/.vim/plugged')
  " common
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-repeat'
  Plug 'preservim/nerdtree'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'ctrlpvim/ctrlp.vim'
  " substitutions
  Plug 'svermeulen/vim-subversive'
  " async run programs
  "Plug 'benekastah/neomake'
  " platformio
  "Plug 'coddingtonbear/neomake-platformio'
  " livecoding
  Plug 'tidalcycles/vim-tidal'
  Plug 'itchyny/vim-haskell-indent'
  Plug 'supercollider/scvim'
  " Visuals
  Plug 'netsgnut/arctheme.vim'
  Plug 'vim-airline/vim-airline'
  " run commands on quickfix window
  Plug 'skywind3000/asyncrun.vim'
  " syntax
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'andys8/vim-elm-syntax'
  Plug 'mustache/vim-mustache-handlebars'
  Plug 'tikhomirov/vim-glsl'

  Plug 'christoomey/vim-system-copy'

call plug#end()

" open compilation list after neomake
let g:neomake_open_list = 2

" open quickfix window automatically when AsyncRun is executed
" set the quickfix window 8 lines height.
let g:asyncrun_open = 8
" F10 to toggle quickfix window
nnoremap <F10> :call asyncrun#quickfix_toggle(8)<cr>
nnoremap <silent> <F7> :AsyncRun -cwd=<root> make <cr>

" Display all matching files when we tab complete
set wildmenu
set exrc
set secure
"set paste

"tidal vim defaults
let g:tidal_default_config = {"socket_name": "default", "target_pane": "tidal:0.0"}
" hush binding on INSERT mode
" mmm, confilct with move hjkl ...imap <buffer> <c-h> <Esc>:TidalHush<Esc>i<Right>

" vim-tidal bindings for scvim
au Filetype supercollider nmap <buffer> <c-e> :call SClang_block()<CR>

"https://github.com/vim-airline/vim-airline/wiki/FAQ#there-is-a-pause-when-leaving-insert-mode
set ttimeoutlen=10

syntax enable
colorscheme iceberg

let s:transparentBg = 0
function! ToggleTransparentMode()
  "AirlineToggle
  colorscheme iceberg
  if s:transparentBg
    let s:transparentBg = 0
    set laststatus=2
    set ruler
  else
    set laststatus=0
    set noruler
    " let vim have transparent background color
    highlight Normal guibg=NONE ctermbg=NONE
    highlight EndOfBuffer guibg=NONE ctermbg=NONE 
    highlight LineNr guibg=NONE ctermbg=NONE 
    highlight StatusLine guibg=NONE ctermbg=NONE 
    let s:transparentBg = 1
  endif
endfunction
nnoremap <leader>t :call ToggleTransparentMode()<CR>

" Better search
set hlsearch
set incsearch

"autocmd FocusLost * silent! wa " Automatically save file
set scrolloff=5 " Keep 5 lines below and above the cursor

nnoremap H ^
nnoremap L $
" semicolon means colon in normal mode
nnoremap ; :
nmap <Leader>s :write<Enter>
nmap <Leader>r :redraw!<Enter>

"NERDtree setup
nnoremap <Leader>f :NERDTreeToggle<Enter>
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
"let NERDTreeQuitOnOpen = 1
let NERDTreeAutoDeleteBuffer = 1

"ctrlp setup
let g:ctrlp_prompt_mappings = {
\ 'PrtClearCache()': ['<c-r>'],
\}
nnoremap <leader>k :bprevious<CR>
nnoremap <leader>j :bnext<CR>
nnoremap <leader>h :tabprevious<CR>
nnoremap <leader>l :tabnext<CR>
nnoremap <leader>b :CtrlPBuffer<CR>

let g:airline_powerline_fonts = 1
"let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#buffer_nr_show = 1

" In insert or command mode, move normally by using Ctrl
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
cnoremap <C-h> <Left>
cnoremap <C-j> <Down>
cnoremap <C-k> <Up>
cnoremap <C-l> <Right>

" some autocompletion bindings

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>d  <Plug>(coc-format-selected)
nmap <leader>d  <Plug>(coc-format-selected)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" subversive substitutions bindings
" s for substitute
nmap s <plug>(SubversiveSubstitute)
nmap ss <plug>(SubversiveSubstituteLine)
nmap S <plug>(SubversiveSubstituteToEndOfLine)
nmap <leader>s <plug>(SubversiveSubstituteRange)
xmap <leader>s <plug>(SubversiveSubstituteRange)
nmap <leader>ss <plug>(SubversiveSubstituteWordRange)
